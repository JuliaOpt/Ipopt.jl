using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))

# Instantiate products:
libipopt = LibraryProduct(prefix, "libipopt")
libcoinmumps = LibraryProduct(prefix, "libcoinmumps")
products = [libipopt, libcoinmumps]

# Download binaries from hosted location
bin_prefix = "https://github.com/staticfloat/IpoptBuilder/releases/download/v3.12.8-6"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
  BinaryProvider.Linux(:x86_64, :glibc)      => ("$bin_prefix/Ipopt.x86_64-linux-gnu.tar.gz",      "2377d4ce1035c059063b955b3d6946b50d2cc61e161d979437e5f6b39f14d95f"),
  BinaryProvider.Linux(:i686, :glibc)        => ("$bin_prefix/Ipopt.i686-linux-gnu.tar.gz",        "b83147200788e285695cf92215df5a2c86084b2a701ce790504617984a05d038"),
  BinaryProvider.Linux(:aarch64, :glibc)     => ("$bin_prefix/Ipopt.aarch64-linux-gnu.tar.gz",     "e3a0535743697e06da11802609817fcf11a35f95481cdf799a63acc8ecc86cce"),
  BinaryProvider.Linux(:armv7l, :glibc)      => ("$bin_prefix/Ipopt.arm-linux-gnueabihf.tar.gz",   "54293ba6800868a7fdfc483f356ca95d6f936b7e44d09d97bcf65b2a4d44ee36"),
  BinaryProvider.MacOS()                     => ("$bin_prefix/Ipopt.x86_64-apple-darwin14.tar.gz", "0160c20de4cf63afd207cf93d2bca206816d65256891b61ede32a55891ecc581"),
  BinaryProvider.Windows(:x86_64)            => ("$bin_prefix/Ipopt.x86_64-w64-mingw32.tar.gz",    "4b178443e18b0e581a88331c62e8f9ab3457b292f94b0a39b66f60ebaa8aa340"),
  BinaryProvider.Windows(:i686)              => ("$bin_prefix/Ipopt.i686-w64-mingw32.tar.gz",      "ec415dcf6559fcce3987473ab270bcb66e14f38d9422ac86d88ef267ea0ab3f0"),
)
if platform_key() in keys(download_info)
    # First, check to see if we're all satisfied
    if any(!satisfied(p; verbose=verbose) for p in products)
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=true)
    end

    # Finally, write out a deps.jl file that will contain mappings for each
    # named product here:
    @write_deps_file libipopt libcoinmumps
else
    error("Your platform $(Sys.MACHINE) is not supported by this package!")
end

